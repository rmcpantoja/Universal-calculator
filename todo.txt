Hacer la calculadora pero una edición para el torneo Hackaton Code
En esta edición pueden haver adiciones como:
• Agregar un tutorial donde explicará los conceptos del programa, su uso, todo teoría al comienzo.
Y a su vez, añadir una pequeña parte práctica o algo así, aunque no tendría mucho sentido aún, pero sería bueno para que los usuarios (jurado tester o lo que sea) se guíen un poco más.
• adición de sonidos, aunque a muchos usuarios no gustan mucho, así que es algo que hay que pensarlo dos veces.
• ¿Y si hacemos esta edición para que sea una calculadora por voz? Es decir... un calculador parlante... Hum, podría ser. Ósea, no es seguro.
• Botón info, acerca de ya sea en la ventana de la calculadora o en una barra de menús. En él se menciona que es una edición especial para el torneo.
Echo, El torneo ya terminó hace mucho y los jurados me han dado buenas sugerencias, así como también detectamos errores que se están mejorando :)
Fuera de la versión de edición:

• agregar sonidos. En algunos casos pueden ser útiles.
• si estos se agregan, en opciones, darle a elegir al usuario si los quiere o no.
• agregar las opciones como se muestra al presionar ese botón.
• agregar una lista donde están todos los comandos o fórmulas disponibles que se pueden aplicar. Hecho.
• En esta lista, se podrá elegir una fórmula. Cada fórmula hace operaciones diferentes, pero el punto aquí es que al seleccionarla, que permita al usuario
idea1: que salgan cajas de texto para que el usuario establezca los parámetros de la fórmula. Ya sea: con Inputbox, o con GuiCtrlInput, creando una matriz que contenga varios inputs, el número de inputs va a depender del número de parámetros que contenga la fórmula. Y si queremos interactuar con esos inputs o parámetros, pues con un Ubound podemos leer estos inputs para poder finalmente resolber. Recurro a los inputs porque InputBox es muy básico y a veces aburrido. ¡Hechooo!
Idea2: Que al usuario al seleccionar la fórmula le regrese a la pantalla para interactuar o escribir, no sin antes poner en ese cuadro de texto la fórmula y el dos puntos, para que el usuario escriba manualmente los parámetros, un parámetro por espacio.
¡Creo que terminaré haciendo las dos ideas! porque puede que las dos puedan servir para que el usuario se acople y decida cómo quiere resolber.
• escribir los parámetros que tiene una fórmula x o, autodetectar automáticamente. Aunque lo mejor es establecer un número de parámetros para cada fórmula. La única idea que tengo para esto es declarar varias variables, cada una con el número de parámetros que se permite. Pero no quiero acumular mucho código. Un array puede ser, pero no creo que funcione porque cuando el usuario elija una fórmula de la lista devuelve la fórmula más no el número índice de la lista. Siendo así, creo que se podría hacer una función donde estén los parámetros de cada fórmula, algo como _SearchParam($sFormula) entonces, la función puede buscar si esa fórmuala existe. Si existe, retorne el número de parámetros. Si no, @error.
Esta tarea ya está casi hecha. Se creó una función donde contiene una matriz 2d que es una tabla de comandos y parámetros. Entonces, partiendo de esa matriz se busca el número de parámetros de un comando x basándose en un comando. Me tube que romper la caveza para pensar en una solución hasta que allé esta.
• para ahorrar o reducir código con mensajes de error que hay menos o más elementos en cuanto a parámetros, se puede crear una sola función que detecta el número de parámetros. Si es menos, lanzar el msgbox de menos. Más, si es msgbox de más, y si es igual, return true.
• Se puede hacer una función que establezca datos a la pantalla de resultados y que a su vez ponga el foco en ella. Esto también ahorra código.
• correjir el error de si hay un error de sintaxis, o sea, si hay un error cuando hay menos o más parámetros de lo establecido pone el foco en la pantalla de resultado después del mensaje de error, y esto no debería pasar. Esto es porque se establece GuiCtrlSetData fuera de las condicionales de si hay menos o más parámetros.
• Hacer la barra de menú como siempre, como todos los programas.
• Agregar el soporte para hacer lo de las fórmulas de peso, masa, IMC que tengo esa UDF que hice con mis manos en mi otro pc. Espero rescatarlo la verdad.
• Muy importante: solucionar el error del Subsistema de Linux para Windows donde supuestamente no hay internet. Hecho, desactivar el autogenerador de resolfConf.
• si se agrega la barra de menú, se podría agregar un soporte que pueda permitir conversiones, por ejemplo de altura, peso, profundidad, etc.
• Incluir también las progresiones geométricas. El problema es que los nombres de estas fórmulas tienen los mismos nombres que las progresiones aritméticas, excepto diferencia y razón que por suerte son diferentes. Para resolver esto, la idea que tengo es establecer un prefijo, algo como: Ap-A1:num num num. AP puede ser Aritmetic Progression, un guión y la fórmula, de resto los parámetros y demás.
Fase 1: Establecer el prefijo "ap" en las funciones aritméticas. Hecho.
fase 2: añadir las fórmulas y comandos  para progresión geométrica. Hecho.

* aviso: hemos diseñado una nueva interfaz para la calculadora! falta unir el código de ella y adaptarla a este proyecto. Hecho.
Esta nueva calculadora tiene una nueva interfaz gráfica para que la experiencia pueda ser mejor con los usuarios normales. Tiene un teclado de números, como cualquier otra calculadora.
Se han hecho muchos cambios si partimos de la interfaz antigua. La pantalla de resultados ya no existe, puesto a que hay una sola pantalla que es la de operaciones. En ella se podrá conocer incluso los resultados. Esto, hablado por nosotros quienes hicimos la interfaz, hemos llegado al punto de que, una pantalla de resultados individual sería algo fastidioso para el usuario. En la interfaz anterior, ponte: si hacías una operación y quieres conocer el igual (=) de ella, lo que hacía es poner el foco en la pantalla de resultados donde estaba solamente la respuesta de la operación que hayas escrito, y si querías escribir nueva operación tenías que retornar a la pantalla de interacción. EN cambio, en esta nueva interfaz puedes interactuar con una sola pantalla sin necesidad de otra solo para conocer los resultados. A mi punto de vista me parece una buena idea. Esto lo hablé con mi prima mientras me ayudó con la interfaz.
Para que podamos conocer el historial, es decir, saber la operación que hayamos escrito antes, se puede añadir un elemento en la barra de menú para el historial de operaciones. Esto, en una versión futura lo tendré.
Opción para mostrar u ocultar el teclado. Más conveniente, un atajo de teclas para ello. Es porque a veces nos resulta incómodo para las personas con discapacidad mientras navegamos por el programa con el teclado y nos topamos con los números matemáticos, símbolos etc. Y preferimos mejor escribir normalmente o navegar por el resto de controles. Hecho.
Establecer aceleradores de teclas para el teclado matemático en patalla. Hecho
Corrección de las acciones para el teclado en pantalla, donde faltaba establecer más elementos en el switch. Hecho, incluso se corrijió el botón igual donde se tomaba en cuenta como parte de los elementos del switch y se ha tenido que mover fuera de los controles que formaban parte para que funcione.
Emplear la libreria advanced math e investigar más sobre algunas fórmulas de ella.
Esta es una tarea que requiere mucho por hacer si queremos aplicarla en la calculadora.
Estoy pensando que en lugar de la lista de fórmulas, se agregue una vista de árbol donde estén categorizadas las fórmulas. Por ejemplo: fórmulas de potencia, raíces, progresiones, etc. Así podrán encontrar mejor las fórmulas en este sentido, en lugar de que la lista tenga todas las fórmulas de todos los tipos en una sola y cada vez que se agreguen más fórmulas sea un lío.
Agregar sistema de actualizaciones.